pb <- txtProgressBar(0, length(unique(fresh_contact$AU_ID)), style = 3)
for(i in 1:length(unique(fresh_contact$AU_ID))){
setTxtProgressBar(pb, i)
station <- unique(fresh_contact$AU_ID)[i]
# Filter table down to single station
fresh_singlestation <- fresh_contact %>%
filter(AU_ID == station) %>%
mutate(geomean_start_date = as.Date(!!SampleStartDate)-90)
#print(paste("i = ", i))
for(j in 1:nrow(fresh_singlestation)){
# print(paste("j = ", j))
#start of 90 day window
geomean_date <- fresh_singlestation$geomean_start_date[j]
# end of 90 day window
enddate <- as.Date(fresh_singlestation[,as.character(SampleStartDate)][j])
#create table for only samples in that window
geomean_period <- fresh_singlestation %>%
filter(!!SampleStartDate <= enddate & !!SampleStartDate >= geomean_date )
count_period = nrow(geomean_period)
#get geomeans if number of samples in that window is 5 or greater
fresh_singlestation[j,"geomean"] <- ifelse(nrow(geomean_period) >= 5, geo_mean(geomean_period$Result_cen), NA)
#get count of 90 day period
fresh_singlestation[j,"count_period"] <- count_period
}
geomeanlist[[i]] <- fresh_singlestation
}
close(pb)
#Bind list to dataframe and ensure numbers are numeric
fresh_analysis <- bind_rows(geomeanlist) %>%
mutate(geomean = as.numeric(geomean),
count_period = as.numeric(count_period)) %>%
select(-Perc_Crit)
print("Finish fresh contact rec analysis")
return(fresh_analysis)
# Data review -------------------------------------------------------------
# IR_export(fresh_analysis, "Parameters/Bacteria/Data Review", "Bacteria_Fresh_Contact", "data" )
#
#
# # do the conparisons listed in methodology
# # Category 5: â‰¥ 1 geomean over 126 OR for 10 or more samples > 10% exceedances of 406 according to the binomial
# # Category 3: : no 90 day  geomean AND < 10 samples with no exceedances of 406
# # Category 3B: no 90 day geomean AND < 10 samples with one or more exceedances of 406
# # Categpry 2: all geomeans < 126 AND AUs with 10 or more samples have < 10% exceedances of 406 according to the binomial.
# fresh_AU_summary <-  fresh_analysis %>%
#   group_by(AU_ID) %>%
#   # list out the maxium geometric mean per AU
#   summarise(OWRD_Basin = first(OWRD_Basin),
#             Max_Geomean = ifelse(!all(is.na(geomean)),max(geomean, na.rm = TRUE),NA),
#             max.value  = max(Result_cen),
#             num_Samples = as.numeric(n()),
#             num_ss_excursions = as.numeric(sum(Result_cen > SS_Crit)),
#             critical_excursions = excursions_conv(num_Samples),
#             SS_Crit = max(SS_Crit),
#             Geomean_Crit = max(Geomean_Crit)) %>%
#   mutate(IR_category = ifelse((!is.na(Max_Geomean) &
#                                  Max_Geomean > Geomean_Crit) |
#                                 (num_Samples >= 5 & num_ss_excursions > critical_excursions), "Cat5",
#                               ifelse(is.na(Max_Geomean) & max.value < SS_Crit & num_Samples < 5, "Cat3",
#                                      ifelse(is.na(Max_Geomean) & max.value > SS_Crit & num_Samples < 5, "Cat3B",
#                                             ifelse(((!is.na(Max_Geomean) & Max_Geomean <= Geomean_Crit) | is.na(Max_Geomean)) &
#                                                      ((num_Samples >= 5 & num_ss_excursions <= critical_excursions | (num_Samples< 5 & !is.na(Max_Geomean)))),
#                                                    "Cat2", "ERROR")))))
#
#
#
}
clack_data_eco_test <- Fresh_Contact_rec(clack_data_bact)
devtools::install_github('https://github.com/TravisPritchardODEQ/IR2018/tree/master/IRlibrary')
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/odeq_assessment package/odeqassessment/R/geo_mean.R', echo=TRUE)
clack_data_eco_test <- Fresh_Contact_rec(clack_data_bact)
# print(paste("j = ", j))
#start of 90 day window
geomean_date <- fresh_singlestation$geomean_start_date[j]
# end of 90 day window
enddate <- as.Date(fresh_singlestation[,as.character(SampleStartDate)][j])
#create table for only samples in that window
geomean_period <- fresh_singlestation %>%
filter(!!SampleStartDate <= enddate & !!SampleStartDate >= geomean_date )
count_period = nrow(geomean_period)
#get geomeans if number of samples in that window is 5 or greater
fresh_singlestation[j,"geomean"] <- ifelse(nrow(geomean_period) >= 5, geo_mean(geomean_period$Result_cen), NA)
#get count of 90 day period
fresh_singlestation[j,"count_period"] <- count_period
df <- clack_data_bact
print("Begin fresh contact rec analysis")
#create lists to get data out of for loops
geomeanlist = list()
SampleStartDate <- as.symbol(date_col)
fresh_contact <- df %>%
filter(BacteriaCode == 2,
Char_Name == "Escherichia coli") %>%
#add blank columns to be filled in during analysis phase
mutate(geomean = "",
count_period = "")
if(length(unique(fresh_contact$AU_ID)) == 0) {
stop("No E coli Data")
}
print("Begin analysis")
pb <- txtProgressBar(0, length(unique(fresh_contact$AU_ID)), style = 3)
for(i in 1:length(unique(fresh_contact$AU_ID))){
setTxtProgressBar(pb, i)
station <- unique(fresh_contact$AU_ID)[i]
# Filter table down to single station
fresh_singlestation <- fresh_contact %>%
filter(AU_ID == station) %>%
mutate(geomean_start_date = as.Date(!!SampleStartDate)-90)
#print(paste("i = ", i))
for(j in 1:nrow(fresh_singlestation)){
# print(paste("j = ", j))
#start of 90 day window
geomean_date <- fresh_singlestation$geomean_start_date[j]
# end of 90 day window
enddate <- as.Date(fresh_singlestation[,as.character(SampleStartDate)][j])
#create table for only samples in that window
geomean_period <- fresh_singlestation %>%
filter(!!SampleStartDate <= enddate & !!SampleStartDate >= geomean_date )
count_period = nrow(geomean_period)
#get geomeans if number of samples in that window is 5 or greater
fresh_singlestation[j,"geomean"] <- ifelse(nrow(geomean_period) >= 5, geo_mean(geomean_period$Result_cen), NA)
#get count of 90 day period
fresh_singlestation[j,"count_period"] <- count_period
}
geomeanlist[[i]] <- fresh_singlestation
}
# print(paste("j = ", j))
#start of 90 day window
geomean_date <- fresh_singlestation$geomean_start_date[j]
# end of 90 day window
enddate <- as.Date(fresh_singlestation[,as.character(SampleStartDate)][j])
#create table for only samples in that window
geomean_period <- fresh_singlestation %>%
filter(!!SampleStartDate <= enddate & !!SampleStartDate >= geomean_date )
setTxtProgressBar(pb, i)
station <- unique(fresh_contact$AU_ID)[i]
df <- clack_data_bact
print("Begin fresh contact rec analysis")
#create lists to get data out of for loops
geomeanlist = list()
SampleStartDate <- as.symbol(date_col)
fresh_contact <- df %>%
filter(BacteriaCode == 2,
Char_Name == "Escherichia coli") %>%
#add blank columns to be filled in during analysis phase
mutate(geomean = "",
count_period = "")
if(length(unique(fresh_contact$MLocID)) == 0) {
stop("No E coli Data")
}
print("Begin analysis")
pb <- txtProgressBar(0, length(unique(fresh_contact$MLocID)), style = 3)
for(i in 1:length(unique(fresh_contact$MLocID))){
setTxtProgressBar(pb, i)
station <- unique(fresh_contact$MLocID)[i]
# Filter table down to single station
fresh_singlestation <- fresh_contact %>%
filter(MLocID == station) %>%
mutate(geomean_start_date = as.Date(!!SampleStartDate)-90)
#print(paste("i = ", i))
for(j in 1:nrow(fresh_singlestation)){
# print(paste("j = ", j))
#start of 90 day window
geomean_date <- fresh_singlestation$geomean_start_date[j]
# end of 90 day window
enddate <- as.Date(fresh_singlestation[,as.character(SampleStartDate)][j])
#create table for only samples in that window
geomean_period <- fresh_singlestation %>%
filter(!!SampleStartDate <= enddate & !!SampleStartDate >= geomean_date )
count_period = nrow(geomean_period)
#get geomeans if number of samples in that window is 5 or greater
fresh_singlestation[j,"geomean"] <- ifelse(nrow(geomean_period) >= 5, geo_mean(geomean_period$Result_cen), NA)
#get count of 90 day period
fresh_singlestation[j,"count_period"] <- count_period
}
geomeanlist[[i]] <- fresh_singlestation
}
close(pb)
#Bind list to dataframe and ensure numbers are numeric
fresh_analysis <- bind_rows(geomeanlist) %>%
mutate(geomean = as.numeric(geomean),
count_period = as.numeric(count_period)) %>%
select(-Perc_Crit)
View(geomeanlist)
#Bind list to dataframe and ensure numbers are numeric
fresh_analysis <- bind_rows(geomeanlist) %>%
mutate(geomean = as.numeric(geomean),
count_period = as.numeric(count_period))
View(fresh_analysis)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/odeq_assessment package/odeqassessment/R/fresh_contact_rec.R', echo=TRUE)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/odeq_assessment package/odeqassessment/R/coastal_contact_rec.R', echo=TRUE)
clack_data_bact <- clack_data %>% filter(Char_Name %in% AWQMS_Char_Names('bacteria'))
clack_data_bact <- clack_data_bact %>% mutate(bact_crit_min = pmin(bact_crit_ss, bact_crit_geomean, bact_crit_percent, na.rm = TRUE))
clack_data_bact <- Censored_data(clack_data_bact, criteria = "bact_crit_min")
clack_data_ent_test <- Coastal_Contact_rec(clack_data_bact)
clack_data_eco_test <- Fresh_Contact_rec(clack_data_bact)
View(clack_data_bact)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/odeq_assessment package/odeqassessment/R/shell_harvest.R', echo=TRUE)
rm(c(clack_data_eco_test))
rm(clack_data_eco_test)
clack_data_eco <- Fresh_Contact_rec(clack_data_bact)
clack_data_shell <- Shell_Harvest(clack_data_bact)
filter(clack_data_bact, BacteriaCode == 3, Char_Name = "Fecal Coliform")
filter(clack_data_bact, BacteriaCode == 3, Char_Name == "Fecal Coliform")
unique(clack_data_bact$Char_Name)
View(clack_data_eco)
excursions_conv <- function(n){
x = ifelse(n <= 11, 2, qbinom(0.90, n, 0.10, lower.tail = TRUE)+1 )
return(x)
}
Fresh_Contact_rec <- function(df, date_col = "sample_datetime"){
print("Begin fresh contact rec analysis")
#create lists to get data out of for loops
geomeanlist = list()
SampleStartDate <- as.symbol(date_col)
fresh_contact <- df %>%
filter(BacteriaCode == 2,
Char_Name == "Escherichia coli") %>%
#add blank columns to be filled in during analysis phase
mutate(geomean = "",
count_period = "")
if(length(unique(fresh_contact$MLocID)) == 0) {
stop("No E coli Data")
}
# Geometric mean calculations --------------------------------------------
# Process the geometirc means
# These for loops first filter data down to individual monitoring stations
# and sets a variable for each sampling date that indicates the start of a 90 day geomean window.
# The second for loop loops through each activity date and creates a table of all activity dates in that
# 90 day window and calculates the geomettric mean. It then assigns the geomeans into the single location table
# created in the first loop, if there are more than 5 sampling dates in that window.
# The end of the first loop puts the single location table into a list which is used to bring
# the data out of the for loop by binding it together after the loop into table "Coastal_singlestation"
print("Begin analysis")
pb <- txtProgressBar(0, length(unique(fresh_contact$MLocID)), style = 3)
for(i in 1:length(unique(fresh_contact$MLocID))){
setTxtProgressBar(pb, i)
station <- unique(fresh_contact$MLocID)[i]
# Filter table down to single station
fresh_singlestation <- fresh_contact %>%
filter(MLocID == station) %>%
mutate(geomean_start_date = as.Date(!!SampleStartDate)-90)
#print(paste("i = ", i))
for(j in 1:nrow(fresh_singlestation)){
# print(paste("j = ", j))
#start of 90 day window
geomean_date <- fresh_singlestation$geomean_start_date[j]
# end of 90 day window
enddate <- as.Date(fresh_singlestation[,as.character(SampleStartDate)][j])
#create table for only samples in that window
geomean_period <- fresh_singlestation %>%
filter(!!SampleStartDate <= enddate & !!SampleStartDate >= geomean_date )
count_period = nrow(geomean_period)
#get geomeans if number of samples in that window is 5 or greater
fresh_singlestation[j,"geomean"] <- ifelse(nrow(geomean_period) >= 5, geo_mean(geomean_period$Result_cen), NA)
#get count of 90 day period
fresh_singlestation[j,"count_period"] <- count_period
}
geomeanlist[[i]] <- fresh_singlestation
}
close(pb)
#Bind list to dataframe and ensure numbers are numeric
fresh_analysis <- bind_rows(geomeanlist) %>%
mutate(geomean = as.numeric(geomean),
count_period = as.numeric(count_period),
ss_excursion = ifelse(Result_cen > bact_crit_ss, 1, 0),
geomean_excursion = ifelse(geomean > bact_crit_geomean, 1, 0)
)
print("Finish fresh contact rec analysis")
return(fresh_analysis)
# Data review -------------------------------------------------------------
# IR_export(fresh_analysis, "Parameters/Bacteria/Data Review", "Bacteria_Fresh_Contact", "data" )
#
#
# # do the conparisons listed in methodology
# # Category 5: â‰¥ 1 geomean over 126 OR for 10 or more samples > 10% exceedances of 406 according to the binomial
# # Category 3: : no 90 day  geomean AND < 10 samples with no exceedances of 406
# # Category 3B: no 90 day geomean AND < 10 samples with one or more exceedances of 406
# # Categpry 2: all geomeans < 126 AND AUs with 10 or more samples have < 10% exceedances of 406 according to the binomial.
# fresh_AU_summary <-  fresh_analysis %>%
#   group_by(AU_ID) %>%
#   # list out the maxium geometric mean per AU
#   summarise(OWRD_Basin = first(OWRD_Basin),
#             Max_Geomean = ifelse(!all(is.na(geomean)),max(geomean, na.rm = TRUE),NA),
#             max.value  = max(Result_cen),
#             num_Samples = as.numeric(n()),
#             num_ss_excursions = as.numeric(sum(Result_cen > SS_Crit)),
#             critical_excursions = excursions_conv(num_Samples),
#             SS_Crit = max(SS_Crit),
#             Geomean_Crit = max(Geomean_Crit)) %>%
#   mutate(IR_category = ifelse((!is.na(Max_Geomean) &
#                                  Max_Geomean > Geomean_Crit) |
#                                 (num_Samples >= 5 & num_ss_excursions > critical_excursions), "Cat5",
#                               ifelse(is.na(Max_Geomean) & max.value < SS_Crit & num_Samples < 5, "Cat3",
#                                      ifelse(is.na(Max_Geomean) & max.value > SS_Crit & num_Samples < 5, "Cat3B",
#                                             ifelse(((!is.na(Max_Geomean) & Max_Geomean <= Geomean_Crit) | is.na(Max_Geomean)) &
#                                                      ((num_Samples >= 5 & num_ss_excursions <= critical_excursions | (num_Samples< 5 & !is.na(Max_Geomean)))),
#                                                    "Cat2", "ERROR")))))
#
#
#
}
clack_data_eco <- Fresh_Contact_rec(clack_data_bact)
View(clack_data_eco)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/odeq_assessment package/odeqassessment/R/fresh_contact_rec.R', echo=TRUE)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/odeq_assessment package/odeqassessment/R/fresh_contact_rec.R', echo=TRUE)
clack_data_eco <- Fresh_Contact_rec(clack_data_bact)
View(clack_data_eco)
any(clack_data_bact$ss_excursion == 1 | clack_data_bact$geomean_excursion == 1)
any(clack_data_bact$ss_excursion == 1 | clack_data_bact$geomean_excursion == 1)
clack_data_bact$ss_excursion == 1
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/odeq_assessment package/odeqassessment/R/fresh_contact_rec.R', echo=TRUE)
clack_data_eco <- Fresh_Contact_rec(clack_data_bact)
unique(clack_data_eco$excursion_cen)
head(clack_data_eco)
devtools::install_github('https://github.com/donco/odeqstatusandtrends')
devtools::install_github('https://github.com/donco/odeqassessment')
library(rgdal)
library(RODBC)
library(dplyr)
# devtools::install_github('https://github.com/donco/odeqstatusandtrends')
library(odeqstatusandtrends)
# devtools::install_github('https://github.com/donco/odeqassessment')
library(odeqassessment)
# devtools::install_github('https://github.com/TravisPritchardODEQ/IR2018/tree/master/IRlibrary')
library(AWQMSdata)
# library(IRlibrary)
library(dataRetrieval)
library(ggplot2)
library(lubridate)
library(pbapply)
library(parallel)
start.date = "2000-01-01"
end.date = "2019-01-01"
Name <- "Clackamas"
# support_files_dir <- "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb/WBD_OR"
basin_shp <- readOGR(dsn = "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb",
layer = 'WBD_HU8', integer64="warn.loss", verbose = FALSE)
basin_shp <- basin_shp[basin_shp$HU_8_NAME %in% c("Clackamas", "South Santiam", "Wilson-Trask-Nestucca", "Coast Fork Willamette"), ]
clack_stations_AWQMS <- get_stations_AWQMS(basin_shp)
# ss_stations_NWIS <- get_stations_NWIS(agwqma_shp)
clack_data_raw <- GetData(parameters = c("Temperature", "Bacteria", "TSS", "DO", "TP", "pH"),
stations_AWQMS = clack_stations_AWQMS,
# stations_NWIS = ss_stations_NWIS,
start.date = start.date,
end.date = end.date)
ent_data <- AWQMSdata::AWQMS_Data(startdate = start.date, enddate = end.date, station = unique(ent_stns$MLocID), char = "Enterococcus")
clack_data_raw <- bind_rows(clack_data_raw, ent_data)
clack_data <- CleanData(clack_data_raw)
clack_data <- add_criteria(clack_data)
clack_data_pH <- clack_data %>% filter(Char_Name == "pH")
clack_data_pH <- Censored_data(clack_data_pH, criteria = 'pH_Min')
clack_data_pH <- pH_assessment(clack_data_pH)
# clack_data_ph$exceed <- ifelse(clack_data_ph$Result_Numeric >= clack_data_ph$pH_crit_min & clack_data_ph$Result_Numeric <= clack_data_ph$pH_crit_max, FALSE, TRUE)
# clack_data_ph <- clack_data_ph %>% filter(!is.na(exceed))
clack_data_temp <- clack_data %>% filter(Char_Name == "Temperature, water")
clack_data_temp <- Censored_data(clack_data_temp, criteria = "temp_crit")
clack_data_temp <- temp_assessment(clack_data_temp)
# clack_data_temp$exceed <- ifelse(clack_data_temp$Result_Numeric >= clack_data_temp$temp_crit, TRUE, FALSE)
# clack_data_temp <- clack_data_temp %>% filter(!is.na(exceed))
clack_data_TP <- clack_data %>% filter(Char_Name == "Phosphate-phosphorus")
clack_data_TP$TP_crit <- NA
clack_data_TP <- Censored_data(clack_data_TP, criteria = "TP_crit")
clack_data_TP <- TP_assessment(clack_data_TP)
clack_data_TSS <- clack_data %>% filter(Char_Name == "Total suspended solids")
clack_data_TSS$TSS_crit <- NA
clack_data_TSS <- Censored_data(clack_data_TSS, criteria = "TSS_crit")
clack_data_TSS <- TSS_assessment(clack_data_TSS)
clack_data_bact <- clack_data %>% filter(Char_Name %in% AWQMS_Char_Names('bacteria'))
clack_data_bact <- clack_data_bact %>% mutate(bact_crit_min = pmin(bact_crit_ss, bact_crit_geomean, bact_crit_percent, na.rm = TRUE))
clack_data_bact <- Censored_data(clack_data_bact, criteria = "bact_crit_min")
clack_data_ent <- Coastal_Contact_rec(clack_data_bact)
clack_data_eco <- Fresh_Contact_rec(clack_data_bact)
clack_data_shell <- Shell_Harvest(clack_data_bact)
setwd('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/odeq_assessment package/odeqassessment')
library(roxygen2)
devtools::document()
devtools::install_github('https://github.com/donco/odeqassessment')
# devtools::install_github('https://github.com/donco/odeqassessment')
library(odeqassessment)
library(rgdal)
library(RODBC)
library(dplyr)
# devtools::install_github('https://github.com/donco/odeqstatusandtrends')
library(odeqstatusandtrends)
# devtools::install_github('https://github.com/donco/odeqassessment')
library(odeqassessment)
# devtools::install_github('https://github.com/TravisPritchardODEQ/IR2018/tree/master/IRlibrary')
library(AWQMSdata)
# library(IRlibrary)
library(dataRetrieval)
library(ggplot2)
library(lubridate)
library(pbapply)
library(parallel)
start.date = "2000-01-01"
end.date = "2019-01-01"
Name <- "Clackamas"
# support_files_dir <- "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb/WBD_OR"
basin_shp <- readOGR(dsn = "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb",
layer = 'WBD_HU8', integer64="warn.loss", verbose = FALSE)
basin_shp <- basin_shp[basin_shp$HU_8_NAME %in% c("Clackamas", "South Santiam", "Wilson-Trask-Nestucca", "Coast Fork Willamette"), ]
clack_stations_AWQMS <- get_stations_AWQMS(basin_shp)
# ss_stations_NWIS <- get_stations_NWIS(agwqma_shp)
clack_data_raw <- GetData(parameters = c("Temperature", "Bacteria", "TSS", "DO", "TP", "pH"),
stations_AWQMS = clack_stations_AWQMS,
# stations_NWIS = ss_stations_NWIS,
start.date = start.date,
end.date = end.date)
ent_data <- AWQMSdata::AWQMS_Data(startdate = start.date, enddate = end.date, station = unique(ent_stns$MLocID), char = "Enterococcus")
clack_data_raw <- bind_rows(clack_data_raw, ent_data)
clack_data <- CleanData(clack_data_raw)
clack_data <- add_criteria(clack_data)
clack_data_pH <- clack_data %>% filter(Char_Name == "pH")
clack_data_pH <- Censored_data(clack_data_pH, criteria = 'pH_Min')
clack_data_pH <- pH_assessment(clack_data_pH)
# clack_data_ph$exceed <- ifelse(clack_data_ph$Result_Numeric >= clack_data_ph$pH_crit_min & clack_data_ph$Result_Numeric <= clack_data_ph$pH_crit_max, FALSE, TRUE)
# clack_data_ph <- clack_data_ph %>% filter(!is.na(exceed))
clack_data_temp <- clack_data %>% filter(Char_Name == "Temperature, water")
clack_data_temp <- Censored_data(clack_data_temp, criteria = "temp_crit")
clack_data_temp <- temp_assessment(clack_data_temp)
# clack_data_temp$exceed <- ifelse(clack_data_temp$Result_Numeric >= clack_data_temp$temp_crit, TRUE, FALSE)
# clack_data_temp <- clack_data_temp %>% filter(!is.na(exceed))
clack_data_TP <- clack_data %>% filter(Char_Name == "Phosphate-phosphorus")
clack_data_TP$TP_crit <- NA
clack_data_TP <- Censored_data(clack_data_TP, criteria = "TP_crit")
clack_data_TP <- TP_assessment(clack_data_TP)
clack_data_TSS <- clack_data %>% filter(Char_Name == "Total suspended solids")
clack_data_TSS$TSS_crit <- NA
clack_data_TSS <- Censored_data(clack_data_TSS, criteria = "TSS_crit")
clack_data_TSS <- TSS_assessment(clack_data_TSS)
clack_data_bact <- clack_data %>% filter(Char_Name %in% AWQMS_Char_Names('bacteria'))
clack_data_bact <- clack_data_bact %>% mutate(bact_crit_min = pmin(bact_crit_ss, bact_crit_geomean, bact_crit_percent, na.rm = TRUE))
clack_data_bact <- Censored_data(clack_data_bact, criteria = "bact_crit_min")
clack_data_ent <- Coastal_Contact_rec(clack_data_bact)
clack_data_eco <- Fresh_Contact_rec(clack_data_bact)
clack_data_shell <- Shell_Harvest(clack_data_bact)
ent_data <- AWQMSdata::AWQMS_Data(startdate = start.date, enddate = end.date, station = unique(ent_stns$MLocID), char = "Enterococcus")
ent_data <- AWQMSdata::AWQMS_Data(startdate = start.date, enddate = end.date, char = "Enterococcus")
clack_data_raw <- bind_rows(clack_data_raw, ent_data)
clack_data <- CleanData(clack_data_raw)
clack_data <- add_criteria(clack_data)
clack_data_bact <- clack_data %>% filter(Char_Name %in% AWQMS_Char_Names('bacteria'))
clack_data_bact <- clack_data_bact %>% mutate(bact_crit_min = pmin(bact_crit_ss, bact_crit_geomean, bact_crit_percent, na.rm = TRUE))
clack_data_bact <- Censored_data(clack_data_bact, criteria = "bact_crit_min")
clack_data_ent <- Coastal_Contact_rec(clack_data_bact)
clack_data_eco <- Fresh_Contact_rec(clack_data_bact)
clack_data_shell <- Shell_Harvest(clack_data_bact)
AWQMSdata::LU_BacteriaCode
parms <- AWQMSdata::AWQMS_Chars()
View(parms)
clack_data_bact
df <- clack_data_bact
View(df)
sum(clack_data$Char_Name == "Enterococcus" & is.na(clack_data$BacteriaCode))
sum(clack_data$Char_Name == "Enterococcus" & !is.na(clack_data$BacteriaCode))
clack_data <- bind_rows(clack_data_temp, clack_data_pH, clack_data_TP, clack_data_TSS, clack_data_eco)
View(clack_data)
clack_data_DO <- clack_data %>% filter(Char_Name %in% AWQMS_Char_Names("DO"))
clack_data_DO <- clack_data %>% filter(Char_Name %in% AWQMS_Char_Names("dissolved oxygen"))
clack_data_DO <- clack_data %>% filter(Char_Name == "Dissolved oxygen (DO)")
clack_data_DO <- clack_data %>% filter(Char_Name == "Dissolved Oxygen (DO)")
clack_data <- CleanData(clack_data_raw)
clack_data <- add_criteria(clack_data)
clack_data_DO <- clack_data %>% filter(Char_Name == "Dissolved oxygen (DO)")
View(clack_data_DO)
clack_data_DO <- clack_data_DO %>% mutate(DO_crit_min = pmin(Do_crit_30D, Do_crit_7Mi, DO_crit_min, Do_crit_instant, na.rm = TRUE))
clack_data_DO <- clack_data %>% filter(Char_Name == "Dissolved oxygen (DO)")
clack_data_DO <- clack_data_DO %>% mutate(DO_min_crit = pmin(Do_crit_30D, Do_crit_7Mi, DO_crit_min, Do_crit_instant, na.rm = TRUE))
identical(clack_data_DO$DO_crit_min, clack_data_DO$DO_min_crit)
which(clack_data_DO$DO_crit_min > clack_data_DO$DO_min_crit)
identical(as.numeric(clack_data_DO$DO_crit_min), as.numeric(clack_data_DO$DO_min_crit))
which(clack_data_DO$DO_crit_min != clack_data_DO$DO_min_crit)
which(clack_data_DO$DO_crit_min == clack_data_DO$DO_min_crit)
sum(clack_data_DO$DO_crit_min == clack_data_DO$DO_min_crit)
sum(clack_data_DO$DO_crit_min == clack_data_DO$DO_min_crit, na.rm = TRUE)
sum(clack_data_DO$DO_crit_min != clack_data_DO$DO_min_crit, na.rm = TRUE)
clack_data_DO %>% filter(is.na(DO_crit_min))
clack_data_DO <- Censored_data(clack_data_DO, criteria = "DO_crit_min")
View(clack_data_DO)
AWQMSdata::DO_crit
AWQMSdata::LU_DOCode
View(clack_data_DO)
datetime_column = "sample_datetime"
spawn_start_column = "spawn_start"
spawn_end_column = "spawn_end"
result_column = "Result_cen"
df <- clack_data_DO
library(lubridate)
library(odbc)
library(glue)
library(DBI)
library(zoo)
library(IRlibrary)
print("Beginning year round analysis")
print("Beginning continuous analysis")
sample_datetime <- as.symbol(datetime_column)
spawn_start <- as.symbol(spawn_start_column)
spawn_end <- as.symbol(spawn_end_column)
result <- as.symbol(result_column)
criteria <- as.symbol(criteria_column)
# add spawn start and end dates as dates, include indicator if actdate is within spawn
# add critical period start and end dates, include indicator is actdate is within critperiod
Results_spawndates <- df %>%
mutate(SpawnStart = ifelse(!is.na(spawn_start), paste0(spawn_start, "/",year(sample_datetime) ), spawn_start ),
SpawnEnd= ifelse(!is.na(spawn_end), paste0(spawn_end, "/", year(sample_datetime)), spawn_end ),
SpawnStart = mdy(spawn_start),
SpawnEnd = mdy(spawn_end),
SpawnEnd = if_else(spawn_end < spawn_start, spawn_end + years(1), spawn_end ),
in_spawn = ifelse(sample_datetime >= spawn_start & sample_datetime <= spawn_end & !is.na(spawn_start), 1, 0 ),
critstart = mdy(paste0("7/1/",year(sample_datetime) )),
critend = mdy(paste0("9/30/",year(sample_datetime) )),
is.crit = ifelse(sample_datetime >= critstart & sample_datetime <= critend, 1, 0 )) %>%
filter(!is.null(OWRD_Basin) & DO_code %in% c(2,3,4))
