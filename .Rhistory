Name <- "Clackamas"
# support_files_dir <- "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb/WBD_OR"
basin_shp <- readOGR(dsn = "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb",
layer = 'WBD_HU8', integer64="warn.loss", verbose = FALSE)
basin_shp <- basin_shp[basin_shp$HU_8_NAME %in% c("Clackamas", "South Santiam", "Wilson-Trask-Nestucca", "Coast Fork Willamette"), ]
clack_stations_AWQMS <- get_stations_AWQMS(basin_shp)
# ss_stations_NWIS <- get_stations_NWIS(agwqma_shp)
clack_data_raw <- GetData(parameters = c("Temperature", "Bacteria", "TSS", "DO", "TP", "pH"),
stations_AWQMS = clack_stations_AWQMS,
# stations_NWIS = ss_stations_NWIS,
start.date = start.date,
end.date = end.date)
ent_data <- AWQMSdata::AWQMS_Data(startdate = start.date, enddate = end.date, char = "Enterococcus")
clack_data_raw <- bind_rows(clack_data_raw, ent_data)
clack_data <- CleanData(clack_data_raw)
clack_data <- add_criteria(clack_data)
clack_data_pH <- clack_data %>% filter(Char_Name == "pH")
clack_data_pH <- Censored_data(clack_data_pH, criteria = 'pH_Min')
clack_data_pH <- pH_assessment(clack_data_pH)
# clack_data_ph$exceed <- ifelse(clack_data_ph$Result_Numeric >= clack_data_ph$pH_crit_min & clack_data_ph$Result_Numeric <= clack_data_ph$pH_crit_max, FALSE, TRUE)
# clack_data_ph <- clack_data_ph %>% filter(!is.na(exceed))
clack_data_temp <- clack_data %>% filter(Char_Name == "Temperature, water")
clack_data_temp <- Censored_data(clack_data_temp, criteria = "temp_crit")
clack_data_temp <- temp_assessment(clack_data_temp)
# clack_data_temp$exceed <- ifelse(clack_data_temp$Result_Numeric >= clack_data_temp$temp_crit, TRUE, FALSE)
# clack_data_temp <- clack_data_temp %>% filter(!is.na(exceed))
clack_data_TP <- clack_data %>% filter(Char_Name == "Phosphate-phosphorus")
clack_data_TP$TP_crit <- NA
clack_data_TP <- Censored_data(clack_data_TP, criteria = "TP_crit")
clack_data_TP <- TP_assessment(clack_data_TP)
clack_data_TSS <- clack_data %>% filter(Char_Name == "Total suspended solids")
clack_data_TSS$TSS_crit <- NA
clack_data_TSS <- Censored_data(clack_data_TSS, criteria = "TSS_crit")
clack_data_TSS <- TSS_assessment(clack_data_TSS)
clack_data_bact <- clack_data %>% filter(Char_Name %in% AWQMS_Char_Names('bacteria'))
clack_data_bact <- clack_data_bact %>% mutate(bact_crit_min = pmin(bact_crit_ss, bact_crit_geomean, bact_crit_percent, na.rm = TRUE))
clack_data_bact <- Censored_data(clack_data_bact, criteria = "bact_crit_min")
clack_data_ent <- Coastal_Contact_rec(clack_data_bact)
clack_data_eco <- Fresh_Contact_rec(clack_data_bact)
clack_data_shell <- Shell_Harvest(clack_data_bact)
# clack_data_bact <- bind_rows(clack_data_ent, clack_data_eco, clack_data_shell)
clack_data_DO <- clack_data %>% filter(Char_Name %in% c("Dissolved oxygen (DO)", "Dissolved oxygen saturation"))
clack_data_DO <- Censored_data(clack_data_DO, criteria = "DO_crit_min")
df <- clack_data_DO
datetime_column = "sample_datetime"
spawn_start_column = "spawn_start"
spawn_end_column = "spawn_end"
result_column = "Result_cen"
library(lubridate)
library(odbc)
library(glue)
library(DBI)
library(zoo)
# library(IRlibrary)
print("Beginning year round analysis")
print("Beginning continuous analysis")
# Year round --------------------------------------------------------------
sample_datetime <- as.symbol(datetime_column)
spawn_start <- as.symbol(spawn_start_column)
spawn_end <- as.symbol(spawn_end_column)
result <- as.symbol(result_column)
df$DO_Class <- LU_DOCode[match(df$DO_code, LU_DOCode$DO_code), "DO_Class"]
# add spawn start and end dates as dates, include indicator if actdate is within spawn
# add critical period start and end dates, include indicator is actdate is within critperiod
data <- df %>%
mutate(
# Add columns for Critcal period start and end date
critstart = mdy(paste0("7/1/",year(sample_datetime) )),
critend = mdy(paste0("9/30/",year(sample_datetime) )),
# Append spawn start and end dates with year
Start_spawn = ifelse(!is.na(spawn_start), paste0(spawn_start,"/",year(sample_datetime)), NA ) ,
End_spawn = ifelse(!is.na(spawn_end), paste0(spawn_end,"/",year(sample_datetime)), NA ),
# Make spwnmn start and end date date format
Start_spawn = mdy(Start_spawn),
End_spawn = mdy(End_spawn),
# If Spawn dates span a calendar year, account for year change in spawn end date
End_spawn = if_else(End_spawn < Start_spawn & sample_datetime >= End_spawn, End_spawn + years(1), # add a year if in spawn period carrying to next year
End_spawn), # otherwise, keep End_spawn as current year
Start_spawn = if_else(End_spawn < Start_spawn & sample_datetime <= End_spawn, Start_spawn - years(1), # subtract a year if in spawn period carrying from previous year
Start_spawn), # otherwise, keep Start_spawn as current year
# Flag for results in spawning and/or critical period
in_spawn = if_else(sample_datetime >= Start_spawn & sample_datetime <= End_spawn & !is.na(Start_spawn), 1, 0 ),
is.crit = if_else(sample_datetime >= critstart & sample_datetime <= critend, 1, 0 ))
data <- data %>%
filter(Statistical_Base %in% c("30DADMean", "7DADMin", "Minimum", NA)) %>%
mutate(yr_excursion = if_else(is.na(Statistical_Base) & Result_cen < Do_crit_instant, 1,
if_else(Statistical_Base == "30DADMean" & Result_cen < Do_crit_30D, 1,
if_else(Statistical_Base == "7DADMin" & Result_cen < Do_crit_7Mi, 1,
if_else(Statistical_Base == "Minimum" & Result_cen < DO_crit_min, 1, 0)))))
data <- data %>%
mutate(spawn_excursion = if_else(in_spawn == 1 & Statistical_Base %in% c("7DADMin", "Minimum", NA) & Result_cen < 11, 1, 0))
# Subset data to DO saturation relevant data
sat_data_yr <- data %>% filter(Statistical_Base %in% c("30DADMean"), yr_excursion == 1, DO_Class == "Cold Water")
sat_data_spawn <- data %>% filter(spawn_excursion == 1)
View(sat_data_spawn)
head(filter(clack_data_DO, Char_Name == "Dissolved oxygen (DO)"))
head(filter(clack_data_DO, Char_Name == "Dissolved oxygen saturation"))
View(clack_data_DO)
View(clack_stations_AWQMS)
clack_data_DO <- clack_data %>% filter(Char_Name %in% c("Dissolved oxygen (DO)", "Dissolved oxygen saturation"))
clack_data_DO <- Censored_data(clack_data_DO, criteria = "DO_crit_min")
clack_data_DO <- DO_assessment(clack_data_DO)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/odeq_assessment package/odeqassessment/R/DO_assessment.R', echo=TRUE)
clack_data_DO <- DO_assessment(clack_data_DO)
clack_data <- bind_rows(clack_data_temp,
clack_data_pH,
clack_data_TP,
clack_data_TSS,
clack_data_eco,
clack_data_DO)
pH_status <- status_stns(clack_data_pH)
temp_status <- status_stns(clack_data_temp)
TP_status <- status_stns(clack_data_TP)
TSS_status <- status_stns(clack_data_TSS)
bact_status <- status_stns(clack_data_eco)
DO_status <- status_stns(clack_data_DO)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status, bact_status, DO_status)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/odeq_assessment package/odeqassessment/R/bact_fresh_contact_rec.R', echo=TRUE)
clack_data_eco <- Fresh_Contact_rec(clack_data_bact)
clack_data <- bind_rows(clack_data_temp,
clack_data_pH,
clack_data_TP,
clack_data_TSS,
clack_data_eco,
clack_data_DO)
pH_status <- status_stns(clack_data_pH)
temp_status <- status_stns(clack_data_temp)
TP_status <- status_stns(clack_data_TP)
TSS_status <- status_stns(clack_data_TSS)
bact_status <- status_stns(clack_data_eco)
DO_status <- status_stns(clack_data_DO)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status, bact_status, DO_status)
pH_trend <- trend_stns(clack_data_pH)
temp_trend <- trend_stns(clack_data_temp)
TP_trend <- trend_stns(clack_data_TP)
TSS_trend <- trend_stns(clack_data_TSS)
bact_trend <- trend_stns(clack_data_eco)
DO_trend <- trend_stns(clack_data_DO)
trend <- bind_rows(pH_trend, temp_trend, TP_trend, TSS_trend, bact_trend, DO_trend)
seaKen <- sea_ken(filter(clack_data, MLocID %in% unique(trend$MLocID)))
seaKen_sample_size <- attributes(seaKen)$sample_size
clack_param_sum <- parameter_summary(status, seaKen, clack_stations_AWQMS)
# Create parameter summary map --------------------------------------------
library(sf)
library(leaflet)
library(knitr)
library(kableExtra)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
c(unique(param_summary$Char_Name)[-1], paste(unique(param_summary$Char_Name)[-1], "Labels"), "World Imagery", "Hydrography", "Land Cover (NLCD 2016)")
param_summary <- clack_param_sum
c(unique(param_summary$Char_Name)[-1], paste(unique(param_summary$Char_Name)[-1], "Labels"), "World Imagery", "Hydrography", "Land Cover (NLCD 2016)")
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
View(clack_data)
colnames(clack_data)
View(clack_data_raw)
View(clack_stations_AWQMS)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/GetData.R', echo=TRUE)
library(rgdal)
library(RODBC)
library(dplyr)
# devtools::install_github('https://github.com/donco/odeqstatusandtrends')
library(odeqstatusandtrends)
# devtools::install_github('https://github.com/donco/odeqassessment')
library(odeqassessment)
# devtools::install_github('https://github.com/TravisPritchardODEQ/IR2018/tree/master/IRlibrary')
library(AWQMSdata)
# library(IRlibrary)
library(dataRetrieval)
library(ggplot2)
library(lubridate)
library(pbapply)
library(parallel)
start.date = "2000-01-01"
end.date = "2019-01-01"
Name <- "Clackamas"
# support_files_dir <- "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb/WBD_OR"
basin_shp <- readOGR(dsn = "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb",
layer = 'WBD_HU8', integer64="warn.loss", verbose = FALSE)
basin_shp <- basin_shp[basin_shp$HU_8_NAME %in% c("Clackamas", "South Santiam", "Wilson-Trask-Nestucca", "Coast Fork Willamette"), ]
clack_stations_AWQMS <- get_stations_AWQMS(basin_shp)
# ss_stations_NWIS <- get_stations_NWIS(agwqma_shp)
clack_data_raw <- GetData(parameters = c("Temperature", "Bacteria", "TSS", "DO", "TP", "pH"),
stations_AWQMS = clack_stations_AWQMS,
# stations_NWIS = ss_stations_NWIS,
start.date = start.date,
end.date = end.date)
ent_data <- AWQMSdata::AWQMS_Data(startdate = start.date, enddate = end.date, char = "Enterococcus")
clack_data_raw <- bind_rows(clack_data_raw, ent_data)
clack_data <- CleanData(clack_data_raw)
clack_data <- add_criteria(clack_data)
clack_data_pH <- clack_data %>% filter(Char_Name == "pH")
clack_data_pH <- Censored_data(clack_data_pH, criteria = 'pH_Min')
clack_data_pH <- pH_assessment(clack_data_pH)
# clack_data_ph$exceed <- ifelse(clack_data_ph$Result_Numeric >= clack_data_ph$pH_crit_min & clack_data_ph$Result_Numeric <= clack_data_ph$pH_crit_max, FALSE, TRUE)
# clack_data_ph <- clack_data_ph %>% filter(!is.na(exceed))
clack_data_temp <- clack_data %>% filter(Char_Name == "Temperature, water")
clack_data_temp <- Censored_data(clack_data_temp, criteria = "temp_crit")
clack_data_temp <- temp_assessment(clack_data_temp)
# clack_data_temp$exceed <- ifelse(clack_data_temp$Result_Numeric >= clack_data_temp$temp_crit, TRUE, FALSE)
# clack_data_temp <- clack_data_temp %>% filter(!is.na(exceed))
clack_data_TP <- clack_data %>% filter(Char_Name == "Phosphate-phosphorus")
clack_data_TP$TP_crit <- NA
clack_data_TP <- Censored_data(clack_data_TP, criteria = "TP_crit")
clack_data_TP <- TP_assessment(clack_data_TP)
clack_data_TSS <- clack_data %>% filter(Char_Name == "Total suspended solids")
clack_data_TSS$TSS_crit <- NA
clack_data_TSS <- Censored_data(clack_data_TSS, criteria = "TSS_crit")
clack_data_TSS <- TSS_assessment(clack_data_TSS)
clack_data_bact <- clack_data %>% filter(Char_Name %in% AWQMS_Char_Names('bacteria'))
clack_data_bact <- clack_data_bact %>% mutate(bact_crit_min = pmin(bact_crit_ss, bact_crit_geomean, bact_crit_percent, na.rm = TRUE))
clack_data_bact <- Censored_data(clack_data_bact, criteria = "bact_crit_min")
clack_data_eco <- Fresh_Contact_rec(clack_data_bact)
clack_data_DO <- clack_data %>% filter(Char_Name %in% c("Dissolved oxygen (DO)", "Dissolved oxygen saturation"))
clack_data_DO <- Censored_data(clack_data_DO, criteria = "DO_crit_min")
clack_data_DO <- DO_assessment(clack_data_DO)
clack_data <- bind_rows(clack_data_temp,
clack_data_pH,
clack_data_TP,
clack_data_TSS,
clack_data_eco,
clack_data_DO)
pH_status <- status_stns(clack_data_pH)
temp_status <- status_stns(clack_data_temp)
TP_status <- status_stns(clack_data_TP)
TSS_status <- status_stns(clack_data_TSS)
bact_status <- status_stns(clack_data_eco)
DO_status <- status_stns(clack_data_DO)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status, bact_status, DO_status)
pH_trend <- trend_stns(clack_data_pH)
temp_trend <- trend_stns(clack_data_temp)
TP_trend <- trend_stns(clack_data_TP)
TSS_trend <- trend_stns(clack_data_TSS)
bact_trend <- trend_stns(clack_data_eco)
DO_trend <- trend_stns(clack_data_DO)
trend <- bind_rows(pH_trend, temp_trend, TP_trend, TSS_trend, bact_trend, DO_trend)
seaKen <- sea_ken(filter(clack_data, MLocID %in% unique(trend$MLocID)))
seaKen_sample_size <- attributes(seaKen)$sample_size
clack_param_sum <- parameter_summary(status, seaKen, clack_stations_AWQMS)
# Create parameter summary map --------------------------------------------
library(sf)
library(leaflet)
library(knitr)
library(kableExtra)
sat_data_yr_inst <- data %>% filter(is.na(Statistical_Base), yr_excursion == 1)
# Subset data to DO saturation relevant data
sat_data_yr_cont <- data %>% filter(Statistical_Base %in% c("30DADMean"), yr_excursion == 1, DO_Class == "Cold Water")
sat_data_spawn_cont <- data %>% filter(Statistical_Base %in% c("30DADMean", "7DADMin", "Minimum"), spawn_excursion == 1)
sat_data_yr_inst <- data %>% filter(is.na(Statistical_Base), yr_excursion == 1)
sat_data_spawn_inst <- data %>% filter(spawn_excursion == 1)
sat_data_inst <- bind_rows(sat_data_yr_inst, sat_data_spawn_inst)
View(sat_data_inst)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/GetData.R', echo=TRUE)
getwd()
setwd('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends')
devtools::document()
setwd('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/odeq_assessment package/odeqassessment')
devtools::document()
clack_data <- CleanData(clack_data_raw)
clack_data <- add_criteria(clack_data)
View(clack_data_temp)
clack_data_DO <- merge(clack_data_DO, select(filter(clack_data, Char_Name == "Temperature, water"), MLocID, sample_datetime, Result_Numeric),
by = c("MLocID", "sample_datetime"), all.x = TRUE, all.y = FALSE)
clack_data_DO <- clack_data %>% filter(Char_Name %in% c("Dissolved oxygen (DO)", "Dissolved oxygen saturation"))
clack_data_DO <- merge(clack_data_DO, select(filter(clack_data, Char_Name == "Temperature, water"), MLocID, sample_datetime, Result_Numeric),
by = c("MLocID", "sample_datetime"), all.x = TRUE, all.y = FALSE)
View(clack_data_DO)
clack_data_DO <- clack_data %>% filter(Char_Name %in% c("Dissolved oxygen (DO)", "Dissolved oxygen saturation"))
clack_data_DO <- merge(clack_data_DO, select(filter(clack_data, Char_Name == "Temperature, water"),
MLocID, sample_datetime, Result_Numeric = temperature),
by = c("MLocID", "sample_datetime"), all.x = TRUE, all.y = FALSE)
colnames(iris)
clack_data_DO <- merge(clack_data_DO, select(filter(clack_data, Char_Name == "Temperature, water"),
MLocID, sample_datetime, temperature = Result_Numeric),
by = c("MLocID", "sample_datetime"), all.x = TRUE, all.y = FALSE)
View(clack_data_DO)
clack_data_DO <- Censored_data(clack_data_DO, criteria = "DO_crit_min")
df <- clack_data_DO
datetime_column = "sample_datetime"
spawn_start_column = "spawn_start"
spawn_end_column = "spawn_end"
result_column = "Result_cen"
temp_column = "temperature"
elev_column = "ELEV_Ft"
temperature <- as.symbol(temp_column)
elevation <- as.symbol(elev_column)
df$DO_Class <- LU_DOCode[match(df$DO_code, LU_DOCode$DO_code), "DO_Class"]
# add spawn start and end dates as dates, include indicator if actdate is within spawn
# add critical period start and end dates, include indicator is actdate is within critperiod
data <- df %>%
mutate(
# Add columns for Critcal period start and end date
critstart = mdy(paste0("7/1/",year(sample_datetime) )),
critend = mdy(paste0("9/30/",year(sample_datetime) )),
# Append spawn start and end dates with year
Start_spawn = ifelse(!is.na(spawn_start), paste0(spawn_start,"/",year(sample_datetime)), NA ) ,
End_spawn = ifelse(!is.na(spawn_end), paste0(spawn_end,"/",year(sample_datetime)), NA ),
# Make spwnmn start and end date date format
Start_spawn = mdy(Start_spawn),
End_spawn = mdy(End_spawn),
# If Spawn dates span a calendar year, account for year change in spawn end date
End_spawn = if_else(End_spawn < Start_spawn & sample_datetime >= End_spawn, End_spawn + years(1), # add a year if in spawn period carrying to next year
End_spawn), # otherwise, keep End_spawn as current year
Start_spawn = if_else(End_spawn < Start_spawn & sample_datetime <= End_spawn, Start_spawn - years(1), # subtract a year if in spawn period carrying from previous year
Start_spawn), # otherwise, keep Start_spawn as current year
# Flag for results in spawning and/or critical period
in_spawn = if_else(sample_datetime >= Start_spawn & sample_datetime <= End_spawn & !is.na(Start_spawn), 1, 0 ),
is.crit = if_else(sample_datetime >= critstart & sample_datetime <= critend, 1, 0 ))
data <- data %>%
filter(Statistical_Base %in% c("30DADMean", "7DADMin", "Minimum", NA)) %>%
mutate(yr_excursion = if_else(is.na(Statistical_Base) & Result_cen < Do_crit_instant, 1,
if_else(Statistical_Base == "30DADMean" & Result_cen < Do_crit_30D, 1,
if_else(Statistical_Base == "7DADMin" & Result_cen < Do_crit_7Mi, 1,
if_else(Statistical_Base == "Minimum" & Result_cen < DO_crit_min, 1, 0)))))
data <- data %>%
mutate(spawn_excursion = if_else(in_spawn == 1 & Statistical_Base %in% c("7DADMin", "Minimum", NA) & Result_cen < 11, 1, 0))
# Subset data to DO saturation relevant data
sat_data_yr_cont <- data %>% filter(Statistical_Base %in% c("30DADMean"), yr_excursion == 1, DO_Class == "Cold Water")
sat_data_spawn_cont <- data %>% filter(Statistical_Base %in% c("30DADMean", "7DADMin", "Minimum"), spawn_excursion == 1)
sat_data_yr_inst <- data %>% filter(is.na(Statistical_Base), yr_excursion == 1)
sat_data_spawn_inst <- data %>% filter(spawn_excursion == 1)
sat_data_inst <- bind_rows(sat_data_yr_inst, sat_data_spawn_inst)
# add spawn start and end dates as dates, include indicator if actdate is within spawn
# add critical period start and end dates, include indicator is actdate is within critperiod
data <- df %>% filter(Char_Name == "Dissolved oxygen (DO)") %>%
mutate(
# Add columns for Critcal period start and end date
critstart = mdy(paste0("7/1/",year(sample_datetime) )),
critend = mdy(paste0("9/30/",year(sample_datetime) )),
# Append spawn start and end dates with year
Start_spawn = ifelse(!is.na(spawn_start), paste0(spawn_start,"/",year(sample_datetime)), NA ) ,
End_spawn = ifelse(!is.na(spawn_end), paste0(spawn_end,"/",year(sample_datetime)), NA ),
# Make spwnmn start and end date date format
Start_spawn = mdy(Start_spawn),
End_spawn = mdy(End_spawn),
# If Spawn dates span a calendar year, account for year change in spawn end date
End_spawn = if_else(End_spawn < Start_spawn & sample_datetime >= End_spawn, End_spawn + years(1), # add a year if in spawn period carrying to next year
End_spawn), # otherwise, keep End_spawn as current year
Start_spawn = if_else(End_spawn < Start_spawn & sample_datetime <= End_spawn, Start_spawn - years(1), # subtract a year if in spawn period carrying from previous year
Start_spawn), # otherwise, keep Start_spawn as current year
# Flag for results in spawning and/or critical period
in_spawn = if_else(sample_datetime >= Start_spawn & sample_datetime <= End_spawn & !is.na(Start_spawn), 1, 0 ),
is.crit = if_else(sample_datetime >= critstart & sample_datetime <= critend, 1, 0 ))
data <- data %>%
filter(Statistical_Base %in% c("30DADMean", "7DADMin", "Minimum", NA)) %>%
mutate(yr_excursion = if_else(is.na(Statistical_Base) & Result_cen < Do_crit_instant, 1,
if_else(Statistical_Base == "30DADMean" & Result_cen < Do_crit_30D, 1,
if_else(Statistical_Base == "7DADMin" & Result_cen < Do_crit_7Mi, 1,
if_else(Statistical_Base == "Minimum" & Result_cen < DO_crit_min, 1, 0)))))
data <- data %>%
mutate(spawn_excursion = if_else(in_spawn == 1 & Statistical_Base %in% c("7DADMin", "Minimum", NA) & Result_cen < 11, 1, 0))
# Subset data to DO saturation relevant data
sat_data_yr_cont <- data %>% filter(Statistical_Base %in% c("30DADMean"), yr_excursion == 1, DO_Class == "Cold Water")
sat_data_spawn_cont <- data %>% filter(Statistical_Base %in% c("30DADMean", "7DADMin", "Minimum"), spawn_excursion == 1)
sat_data_yr_inst <- data %>% filter(is.na(Statistical_Base), yr_excursion == 1)
sat_data_spawn_inst <- data %>% filter(spawn_excursion == 1)
sat_data_inst <- bind_rows(sat_data_yr_inst, sat_data_spawn_inst)
DOSat_calc <- function(DO, TempC, elevft) {
DO / (exp(-139.34411 + ((1.575701*10^5)/(TempC+273.15)) -
((6.642308 * 10^7)/((TempC+273.15)^2)) +
((1.243800 * 10^10)/((TempC+273.15)^3)) -
((8.621949 * 10^11)/((TempC+273.15)^4))) *
(1 - (0.0001148 * elevft/3.281 ))) * 100
}
View(clack_data_DO)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/GetData.R', echo=TRUE)
# ss_stations_NWIS <- get_stations_NWIS(agwqma_shp)
clack_data_raw <- GetData(parameters = c("Temperature", "Bacteria", "TSS", "DO", "TP", "pH"),
stations_AWQMS = clack_stations_AWQMS,
# stations_NWIS = ss_stations_NWIS,
start.date = start.date,
end.date = end.date)
ent_data <- AWQMSdata::AWQMS_Data(startdate = start.date, enddate = end.date, char = "Enterococcus")
clack_data_raw <- bind_rows(clack_data_raw, ent_data)
clack_data <- CleanData(clack_data_raw)
clack_data <- add_criteria(clack_data)
clack_data_DO <- clack_data %>% filter(Char_Name %in% c("Dissolved oxygen (DO)", "Dissolved oxygen saturation"))
clack_data_DO <- merge(clack_data_DO, select(filter(clack_data, Char_Name == "Temperature, water"),
MLocID, sample_datetime, temperature = Result_Numeric),
by = c("MLocID", "sample_datetime"), all.x = TRUE, all.y = FALSE)
clack_data_DO <- Censored_data(clack_data_DO, criteria = "DO_crit_min")
df <- clack_data_DO
df$DO_Class <- LU_DOCode[match(df$DO_code, LU_DOCode$DO_code), "DO_Class"]
# add spawn start and end dates as dates, include indicator if actdate is within spawn
# add critical period start and end dates, include indicator is actdate is within critperiod
data <- df %>% filter(Char_Name == "Dissolved oxygen (DO)") %>%
mutate(
# Add columns for Critcal period start and end date
critstart = mdy(paste0("7/1/",year(sample_datetime) )),
critend = mdy(paste0("9/30/",year(sample_datetime) )),
# Append spawn start and end dates with year
Start_spawn = ifelse(!is.na(spawn_start), paste0(spawn_start,"/",year(sample_datetime)), NA ) ,
End_spawn = ifelse(!is.na(spawn_end), paste0(spawn_end,"/",year(sample_datetime)), NA ),
# Make spwnmn start and end date date format
Start_spawn = mdy(Start_spawn),
End_spawn = mdy(End_spawn),
# If Spawn dates span a calendar year, account for year change in spawn end date
End_spawn = if_else(End_spawn < Start_spawn & sample_datetime >= End_spawn, End_spawn + years(1), # add a year if in spawn period carrying to next year
End_spawn), # otherwise, keep End_spawn as current year
Start_spawn = if_else(End_spawn < Start_spawn & sample_datetime <= End_spawn, Start_spawn - years(1), # subtract a year if in spawn period carrying from previous year
Start_spawn), # otherwise, keep Start_spawn as current year
# Flag for results in spawning and/or critical period
in_spawn = if_else(sample_datetime >= Start_spawn & sample_datetime <= End_spawn & !is.na(Start_spawn), 1, 0 ),
is.crit = if_else(sample_datetime >= critstart & sample_datetime <= critend, 1, 0 ))
data <- data %>%
filter(Statistical_Base %in% c("30DADMean", "7DADMin", "Minimum", NA)) %>%
mutate(yr_excursion = if_else(is.na(Statistical_Base) & Result_cen < Do_crit_instant, 1,
if_else(Statistical_Base == "30DADMean" & Result_cen < Do_crit_30D, 1,
if_else(Statistical_Base == "7DADMin" & Result_cen < Do_crit_7Mi, 1,
if_else(Statistical_Base == "Minimum" & Result_cen < DO_crit_min, 1, 0)))))
data <- data %>%
mutate(spawn_excursion = if_else(in_spawn == 1 & Statistical_Base %in% c("7DADMin", "Minimum", NA) & Result_cen < 11, 1, 0))
View(data)
View(clack_data_raw)
View(clack_data)
source('//deqhq1/wqnps/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/CleanData.R', echo=TRUE)
clack_data <- CleanData(clack_data_raw)
clack_data <- add_criteria(clack_data)
clack_data_DO <- clack_data %>% filter(Char_Name %in% c("Dissolved oxygen (DO)", "Dissolved oxygen saturation"))
clack_data_DO <- merge(clack_data_DO, select(filter(clack_data, Char_Name == "Temperature, water"),
MLocID, sample_datetime, temperature = Result_Numeric),
by = c("MLocID", "sample_datetime"), all.x = TRUE, all.y = FALSE)
clack_data_DO <- Censored_data(clack_data_DO, criteria = "DO_crit_min")
df <- clack_data_DO
df$DO_Class <- LU_DOCode[match(df$DO_code, LU_DOCode$DO_code), "DO_Class"]
# add spawn start and end dates as dates, include indicator if actdate is within spawn
# add critical period start and end dates, include indicator is actdate is within critperiod
data <- df %>% filter(Char_Name == "Dissolved oxygen (DO)") %>%
mutate(
# Add columns for Critcal period start and end date
critstart = mdy(paste0("7/1/",year(sample_datetime) )),
critend = mdy(paste0("9/30/",year(sample_datetime) )),
# Append spawn start and end dates with year
Start_spawn = ifelse(!is.na(spawn_start), paste0(spawn_start,"/",year(sample_datetime)), NA ) ,
End_spawn = ifelse(!is.na(spawn_end), paste0(spawn_end,"/",year(sample_datetime)), NA ),
# Make spwnmn start and end date date format
Start_spawn = mdy(Start_spawn),
End_spawn = mdy(End_spawn),
# If Spawn dates span a calendar year, account for year change in spawn end date
End_spawn = if_else(End_spawn < Start_spawn & sample_datetime >= End_spawn, End_spawn + years(1), # add a year if in spawn period carrying to next year
End_spawn), # otherwise, keep End_spawn as current year
Start_spawn = if_else(End_spawn < Start_spawn & sample_datetime <= End_spawn, Start_spawn - years(1), # subtract a year if in spawn period carrying from previous year
Start_spawn), # otherwise, keep Start_spawn as current year
# Flag for results in spawning and/or critical period
in_spawn = if_else(sample_datetime >= Start_spawn & sample_datetime <= End_spawn & !is.na(Start_spawn), 1, 0 ),
is.crit = if_else(sample_datetime >= critstart & sample_datetime <= critend, 1, 0 ))
data <- data %>%
filter(Statistical_Base %in% c("30DADMean", "7DADMin", "Minimum", NA)) %>%
mutate(yr_excursion = if_else(is.na(Statistical_Base) & Result_cen < Do_crit_instant, 1,
if_else(Statistical_Base == "30DADMean" & Result_cen < Do_crit_30D, 1,
if_else(Statistical_Base == "7DADMin" & Result_cen < Do_crit_7Mi, 1,
if_else(Statistical_Base == "Minimum" & Result_cen < DO_crit_min, 1, 0)))))
data <- data %>%
mutate(spawn_excursion = if_else(in_spawn == 1 & Statistical_Base %in% c("7DADMin", "Minimum", NA) & Result_cen < 11, 1, 0))
# Subset data to DO saturation relevant data
sat_data_yr_cont <- data %>% filter(Statistical_Base %in% c("30DADMean"), yr_excursion == 1, DO_Class == "Cold Water")
sat_data_spawn_cont <- data %>% filter(Statistical_Base %in% c("30DADMean", "7DADMin", "Minimum"), spawn_excursion == 1)
sat_data_yr_inst <- data %>% filter(is.na(Statistical_Base), yr_excursion == 1)
sat_data_spawn_inst <- data %>% filter(spawn_excursion == 1)
sat_data_inst <- bind_rows(sat_data_yr_inst, sat_data_spawn_inst)
sat_data_inst$DO_sat <- mapply(DO_sat_calc, sat_data_inst$Result_cen, sat_data_inst$temperature, sat_data_inst$ELEV_Ft)
DO_sat_calc <- function(DO, TempC, elevft) {
DO / (exp(-139.34411 + ((1.575701*10^5)/(TempC+273.15)) -
((6.642308 * 10^7)/((TempC+273.15)^2)) +
((1.243800 * 10^10)/((TempC+273.15)^3)) -
((8.621949 * 10^11)/((TempC+273.15)^4))) *
(1 - (0.0001148 * elevft/3.281 ))) * 100
}
mapply(DO_sat_calc, sat_data_inst$Result_cen, sat_data_inst$temperature, sat_data_inst$ELEV_Ft, USE.NAMES = FALSE)
sat_data_inst$DO_sat <- mapply(DO_sat_calc, sat_data_inst$Result_cen, sat_data_inst$temperature, sat_data_inst$ELEV_Ft, USE.NAMES = FALSE)
sat_data_inst$DO_sat <- if_else(sat_data_inst$DO_sat > 100, 100, sat_data_inst$DO_sat)
sat_data_inst$DO_sat
sat_data_inst$DO_sat <- mapply(DO_sat_calc, sat_data_inst$Result_cen, sat_data_inst$temperature, sat_data_inst$ELEV_Ft, USE.NAMES = FALSE)
unique(sat_data_inst$DO_sat)
sat_data_inst$DO_sat <- if_else(sat_data_inst$DO_sat > 100, 100, sat_data_inst$DO_sat)
