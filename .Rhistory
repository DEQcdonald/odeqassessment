in_spawn = ifelse(sample_datetime >= spawn_start & sample_datetime <= spawn_end & !is.na(spawn_start), 1, 0 ),
critstart = mdy(paste0("7/1/",year(sample_datetime) )),
critend = mdy(paste0("9/30/",year(sample_datetime) )),
is.crit = ifelse(sample_datetime >= critstart & sample_datetime <= critend, 1, 0 )) %>%
filter(!is.null(OWRD_Basin) & DO_code %in% c(2,3,4))
# add spawn start and end dates as dates, include indicator if actdate is within spawn
# add critical period start and end dates, include indicator is actdate is within critperiod
Results_spawndates <- df %>%
mutate(SpawnStart = ifelse(!is.na(spawn_start), paste0(spawn_start, "/",year(sample_datetime) ), spawn_start ),
SpawnEnd= ifelse(!is.na(spawn_end), paste0(spawn_end, "/", year(sample_datetime)), spawn_end ),
SpawnStart = mdy(spawn_start),
SpawnEnd = mdy(spawn_end),
SpawnEnd = if_else(spawn_end < spawn_start, spawn_end + years(1), spawn_end ),
in_spawn = ifelse(sample_datetime >= spawn_start & sample_datetime <= spawn_end & !is.na(spawn_start), 1, 0 ),
critstart = mdy(paste0("7/1/",year(sample_datetime) )),
critend = mdy(paste0("9/30/",year(sample_datetime) )),
is.crit = ifelse(sample_datetime >= critstart & sample_datetime <= critend, 1, 0 )) %>%
filter(!is.null(OWRD_Basin) & DO_code %in% c(2,3,4))
# add spawn start and end dates as dates, include indicator if actdate is within spawn
# add critical period start and end dates, include indicator is actdate is within critperiod
Results_spawndates <- df %>%
mutate(SpawnStart = ifelse(!is.na(spawn_start), paste0(spawn_start, "/",year(sample_datetime) ), spawn_start ),
SpawnEnd= ifelse(!is.na(spawn_end), paste0(spawn_end, "/", year(sample_datetime)), spawn_end ),
SpawnStart = mdy(spawn_start),
SpawnEnd = mdy(spawn_end),
SpawnStart = if_else(End_spawn < Start_spawn & sample_datetime <= End_spawn, Start_spawn - years(1), # subtract a year if in spawn period carrying from previous year
Start_spawn),
SpawnEnd = if_else(SpawnEnd < SpawnStart, SpawnEnd + years(1), SpawnEnd ),
in_spawn = ifelse(sample_datetime >= spawn_start & sample_datetime <= spawn_end & !is.na(spawn_start), 1, 0 ),
critstart = mdy(paste0("7/1/",year(sample_datetime) )),
critend = mdy(paste0("9/30/",year(sample_datetime) )),
is.crit = ifelse(sample_datetime >= critstart & sample_datetime <= critend, 1, 0 )) %>%
filter(!is.null(OWRD_Basin) & DO_code %in% c(2,3,4))
# add spawn start and end dates as dates, include indicator if actdate is within spawn
# add critical period start and end dates, include indicator is actdate is within critperiod
Results_spawndates <- df %>%
mutate(Start_spawn = ifelse(!is.na(spawn_start), paste0(spawn_start, "/",year(sample_datetime) ), spawn_start ),
End_spawn= ifelse(!is.na(spawn_end), paste0(spawn_end, "/", year(sample_datetime)), spawn_end ),
Start_spawn = mdy(Start_spawn),
End_spawn = mdy(End_spawn),
End_spawn = if_else(End_spawn < Start_spawn & sample_datetime >= End_spawn, End_spawn + years(1), # add a year if in spawn period carrying to next year
End_spawn), # otherwise, keep End_spawn as current year
Start_spawn = if_else(End_spawn < Start_spawn & sample_datetime <= End_spawn, Start_spawn - years(1), # subtract a year if in spawn period carrying from previous year
Start_spawn),
in_spawn = ifelse(sample_datetime >= spawn_start & sample_datetime <= spawn_end & !is.na(spawn_start), 1, 0 ),
critstart = mdy(paste0("7/1/",year(sample_datetime) )),
critend = mdy(paste0("9/30/",year(sample_datetime) )),
is.crit = ifelse(sample_datetime >= critstart & sample_datetime <= critend, 1, 0 )) %>%
filter(!is.null(OWRD_Basin) & DO_code %in% c(2,3,4))
# add spawn start and end dates as dates, include indicator if actdate is within spawn
# add critical period start and end dates, include indicator is actdate is within critperiod
Results_spawndates <- df %>%
mutate(Start_spawn = ifelse(!is.na(spawn_start), paste0(spawn_start, "/",year(sample_datetime) ), spawn_start ),
End_spawn= ifelse(!is.na(spawn_end), paste0(spawn_end, "/", year(sample_datetime)), spawn_end ),
Start_spawn = mdy(Start_spawn),
End_spawn = mdy(End_spawn),
End_spawn = if_else(End_spawn < Start_spawn & sample_datetime >= End_spawn, End_spawn + years(1), # add a year if in spawn period carrying to next year
End_spawn), # otherwise, keep End_spawn as current year
Start_spawn = if_else(End_spawn < Start_spawn & sample_datetime <= End_spawn, Start_spawn - years(1), # subtract a year if in spawn period carrying from previous year
Start_spawn),
in_spawn = ifelse(sample_datetime >= spawn_start & sample_datetime <= spawn_end & !is.na(spawn_start), 1, 0 ),
critstart = mdy(paste0("7/1/",year(sample_datetime) )),
critend = mdy(paste0("9/30/",year(sample_datetime) )),
is.crit = ifelse(sample_datetime >= critstart & sample_datetime <= critend, 1, 0 ))
# add spawn start and end dates as dates, include indicator if actdate is within spawn
# add critical period start and end dates, include indicator is actdate is within critperiod
Results_spawndates <- df %>%
mutate(Start_spawn = ifelse(!is.na(spawn_start), paste0(spawn_start, "/",year(sample_datetime) ), spawn_start ),
End_spawn= ifelse(!is.na(spawn_end), paste0(spawn_end, "/", year(sample_datetime)), spawn_end ),
Start_spawn = mdy(Start_spawn),
End_spawn = mdy(End_spawn),
End_spawn = if_else(End_spawn < Start_spawn & sample_datetime >= End_spawn, End_spawn + years(1), # add a year if in spawn period carrying to next year
End_spawn), # otherwise, keep End_spawn as current year
Start_spawn = if_else(End_spawn < Start_spawn & sample_datetime <= End_spawn, Start_spawn - years(1), # subtract a year if in spawn period carrying from previous year
Start_spawn),
in_spawn = ifelse(sample_datetime >= Start_spawn & sample_datetime <= End_spawn & !is.na(Start_spawn), 1, 0 ),
critstart = mdy(paste0("7/1/",year(sample_datetime) )),
critend = mdy(paste0("9/30/",year(sample_datetime) )),
is.crit = ifelse(sample_datetime >= critstart & sample_datetime <= critend, 1, 0 ))
# Summarize available data to get a list of AU's to be analyzed using cont. data
results_cont_summary <- Results_spawndates %>%
filter(Statistical_Base == "30DADMean") %>%
group_by(MLocID) %>%
summarise(tot_30d_metrics = n(),
crit_30d_periods = sum(is.crit)) %>%
filter(crit_30d_periods >= 15,
!is.na(MLocID))
View(results_cont_summary)
# filter down to AUs that are to be evaluated with cont metrics
# Filter down to only 30-D, 7-Mi, and daily minimums
# Flag various violations
continuous_data_analysis <- Results_spawndates %>%
filter(MLocID %in% results_cont_summary$MLocID) %>%
filter(Statistical_Base %in% c("30DADMean", "7DADMin", "Minimum")) %>%
mutate(Violation = ifelse(Statistical_Base == "30DADMean" & IRResultNWQSunit < crit_30D, 1,
ifelse(Statistical_Base == "7DADMin" & IRResultNWQSunit < crit_7Mi, 1,
ifelse(Statistical_Base == "Minimum" & IRResultNWQSunit < crit_Min, 1, 0 ))))
View(clack_data_DO)
# filter down to AUs that are to be evaluated with cont metrics
# Filter down to only 30-D, 7-Mi, and daily minimums
# Flag various violations
continuous_data_analysis <- Results_spawndates %>%
filter(MLocID %in% results_cont_summary$MLocID) %>%
filter(Statistical_Base %in% c("30DADMean", "7DADMin", "Minimum")) %>%
mutate(Violation = ifelse(Statistical_Base == "30DADMean" & Result_cen < crit_30D, 1,
ifelse(Statistical_Base == "7DADMin" & Result_cen < crit_7Mi, 1,
ifelse(Statistical_Base == "Minimum" & Result_cen < crit_Min, 1, 0 ))))
View(clack_data_DO)
# filter down to AUs that are to be evaluated with cont metrics
# Filter down to only 30-D, 7-Mi, and daily minimums
# Flag various violations
continuous_data_analysis <- Results_spawndates %>%
filter(MLocID %in% results_cont_summary$MLocID) %>%
filter(Statistical_Base %in% c("30DADMean", "7DADMin", "Minimum")) %>%
mutate(Violation = ifelse(Statistical_Base == "30DADMean" & Result_cen < Do_crit_30D, 1,
ifelse(Statistical_Base == "7DADMin" & Result_cen < Do_crit_7Mi, 1,
ifelse(Statistical_Base == "Minimum" & Result_cen < DO_crit_min, 1, 0))))
View(continuous_data_analysis)
AWQMSdata::DO_crit
AWQMSdata::LU_DOCode
df$DO_Class <- LU_DOCode[match(df$DO_code, LU_DOCode$DO_code), "DO_Class"]
# add spawn start and end dates as dates, include indicator if actdate is within spawn
# add critical period start and end dates, include indicator is actdate is within critperiod
Results_spawndates <- df %>%
mutate(Start_spawn = ifelse(!is.na(spawn_start), paste0(spawn_start, "/",year(sample_datetime) ), spawn_start ),
End_spawn= ifelse(!is.na(spawn_end), paste0(spawn_end, "/", year(sample_datetime)), spawn_end ),
Start_spawn = mdy(Start_spawn),
End_spawn = mdy(End_spawn),
End_spawn = if_else(End_spawn < Start_spawn & sample_datetime >= End_spawn, End_spawn + years(1), # add a year if in spawn period carrying to next year
End_spawn), # otherwise, keep End_spawn as current year
Start_spawn = if_else(End_spawn < Start_spawn & sample_datetime <= End_spawn, Start_spawn - years(1), # subtract a year if in spawn period carrying from previous year
Start_spawn),
in_spawn = ifelse(sample_datetime >= Start_spawn & sample_datetime <= End_spawn & !is.na(Start_spawn), 1, 0 ),
critstart = mdy(paste0("7/1/",year(sample_datetime) )),
critend = mdy(paste0("9/30/",year(sample_datetime) )),
is.crit = ifelse(sample_datetime >= critstart & sample_datetime <= critend, 1, 0 ))
# Summarize available data to get a list of AU's to be analyzed using cont. data
results_cont_summary <- Results_spawndates %>%
filter(Statistical_Base == "30DADMean") %>%
group_by(MLocID) %>%
summarise(tot_30d_metrics = n(),
crit_30d_periods = sum(is.crit)) %>%
filter(crit_30d_periods >= 15,
!is.na(MLocID))
# filter down to AUs that are to be evaluated with cont metrics
# Filter down to only 30-D, 7-Mi, and daily minimums
# Flag various violations
continuous_data_analysis <- Results_spawndates %>%
filter(MLocID %in% results_cont_summary$MLocID) %>%
filter(Statistical_Base %in% c("30DADMean", "7DADMin", "Minimum")) %>%
mutate(Violation = ifelse(Statistical_Base == "30DADMean" & Result_cen < Do_crit_30D, 1,
ifelse(Statistical_Base == "7DADMin" & Result_cen < Do_crit_7Mi, 1,
ifelse(Statistical_Base == "Minimum" & Result_cen < DO_crit_min, 1, 0))))
# Run through initial categorization
# This all gets redone in the end
# Where percent saturation would make a difference, set category as "Check percent Sat"
continuous_data_categories <- continuous_data_analysis %>%
group_by(MLocID, DO_Class) %>%
summarise(Total_violations = sum(Violation),
Sum_30D_violations = sum(Violation [Statistical_Base == "30DADMean"]),
Sum_7mi_violations = sum(Violation [Statistical_Base == "7DADMin"]),
Sum_abs_min_violations = sum(Violation [Statistical_Base == "Minimum"])) %>%
mutate(IR_category = ifelse(DO_Class != "Cold Water" &
(Sum_30D_violations >= 2 |
Sum_7mi_violations >= 2 |
Sum_abs_min_violations >= 2), "Cat 5",
ifelse(DO_Class == "Cold Water" &
(Sum_7mi_violations >= 2 |
Sum_abs_min_violations >= 2), "Cat 5",
ifelse(DO_Class == "Cold Water" &
Sum_30D_violations >= 2 &
Sum_7mi_violations < 2 &
Sum_abs_min_violations < 2, "Check percent Sat",
ifelse(Sum_30D_violations < 2 &
Sum_7mi_violations < 2 &
Sum_abs_min_violations < 2, "Cat 2", "Error" )))))
# Datatable of results that need percent saturation
cont_perc_sat_check <- continuous_data_analysis %>%
filter(MLocID %in% unique(subset(continuous_data_categories, IR_category == "Check percent Sat" )$MLocID) )
library(rgdal)
library(RODBC)
library(dplyr)
# devtools::install_github('https://github.com/donco/odeqstatusandtrends')
library(odeqstatusandtrends)
# devtools::install_github('https://github.com/donco/odeqassessment')
library(odeqassessment)
# devtools::install_github('https://github.com/TravisPritchardODEQ/IR2018/tree/master/IRlibrary')
library(AWQMSdata)
# library(IRlibrary)
library(dataRetrieval)
library(ggplot2)
library(lubridate)
library(pbapply)
library(parallel)
start.date = "2000-01-01"
end.date = "2019-01-01"
Name <- "Clackamas"
# support_files_dir <- "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb/WBD_OR"
basin_shp <- readOGR(dsn = "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb",
layer = 'WBD_HU8', integer64="warn.loss", verbose = FALSE)
basin_shp <- basin_shp[basin_shp$HU_8_NAME %in% c("Clackamas", "South Santiam", "Wilson-Trask-Nestucca", "Coast Fork Willamette"), ]
clack_stations_AWQMS <- get_stations_AWQMS(basin_shp)
# ss_stations_NWIS <- get_stations_NWIS(agwqma_shp)
clack_data_raw <- GetData(parameters = c("Temperature", "Bacteria", "TSS", "DO", "TP", "pH"),
stations_AWQMS = clack_stations_AWQMS,
# stations_NWIS = ss_stations_NWIS,
start.date = start.date,
end.date = end.date)
ent_data <- AWQMSdata::AWQMS_Data(startdate = start.date, enddate = end.date, char = "Enterococcus")
clack_data_raw <- bind_rows(clack_data_raw, ent_data)
clack_data <- CleanData(clack_data_raw)
clack_data <- add_criteria(clack_data)
clack_data_pH <- clack_data %>% filter(Char_Name == "pH")
clack_data_pH <- Censored_data(clack_data_pH, criteria = 'pH_Min')
clack_data_pH <- pH_assessment(clack_data_pH)
# clack_data_ph$exceed <- ifelse(clack_data_ph$Result_Numeric >= clack_data_ph$pH_crit_min & clack_data_ph$Result_Numeric <= clack_data_ph$pH_crit_max, FALSE, TRUE)
# clack_data_ph <- clack_data_ph %>% filter(!is.na(exceed))
clack_data_temp <- clack_data %>% filter(Char_Name == "Temperature, water")
clack_data_temp <- Censored_data(clack_data_temp, criteria = "temp_crit")
clack_data_temp <- temp_assessment(clack_data_temp)
# clack_data_temp$exceed <- ifelse(clack_data_temp$Result_Numeric >= clack_data_temp$temp_crit, TRUE, FALSE)
# clack_data_temp <- clack_data_temp %>% filter(!is.na(exceed))
clack_data_TP <- clack_data %>% filter(Char_Name == "Phosphate-phosphorus")
clack_data_TP$TP_crit <- NA
clack_data_TP <- Censored_data(clack_data_TP, criteria = "TP_crit")
clack_data_TP <- TP_assessment(clack_data_TP)
clack_data_TSS <- clack_data %>% filter(Char_Name == "Total suspended solids")
clack_data_TSS$TSS_crit <- NA
clack_data_TSS <- Censored_data(clack_data_TSS, criteria = "TSS_crit")
clack_data_TSS <- TSS_assessment(clack_data_TSS)
clack_data_bact <- clack_data %>% filter(Char_Name %in% AWQMS_Char_Names('bacteria'))
clack_data_bact <- clack_data_bact %>% mutate(bact_crit_min = pmin(bact_crit_ss, bact_crit_geomean, bact_crit_percent, na.rm = TRUE))
clack_data_bact <- Censored_data(clack_data_bact, criteria = "bact_crit_min")
clack_data_ent <- Coastal_Contact_rec(clack_data_bact)
clack_data_eco <- Fresh_Contact_rec(clack_data_bact)
clack_data_shell <- Shell_Harvest(clack_data_bact)
clack_data_DO <- clack_data %>% filter(Char_Name == "Dissolved oxygen (DO)")
clack_data_DO <- Censored_data(clack_data_DO, criteria = "DO_crit_min")
ggplot(mtcars, aes(x = mpg, y = cyl, fill = mtcars$gear))
ggplot(mtcars, aes(x = mpg, y = cyl, fill = mtcars$gear))+
geom_bar()
ggplot(mtcars, aes(x = mpg, y = cyl, fill = mtcars$gear))+
geom_bar(stat = "identity")
mtcars
ggplot(mtcars, aes(x = mpg, y = cyl, fill = row.names()))+
geom_bar(stat = "identity")
ggplot(mtcars, aes(x = mpg, y = cyl, fill = gear))+geom_bar(stat = "identity")
ggplot(mtcars, aes(x = mpg, y = cyl, fill = gear))+geom_bar(stat = "identity", position = position_dodge())
ggplot(mtcars, aes(x = mpg, y = cyl, fill = rownames(mtcars)))+geom_bar(stat = "identity", position = position_dodge())
ggplot(head(mtcars), aes(x = mpg, y = cyl, fill = rownames(head(mtcars))))+geom_bar(stat = "identity", position = position_dodge())
ggplot(head(mtcars), aes(x = mpg, y = cyl, fill = rownames(head(mtcars))))+geom_bar(stat = "identity", position = "dodge")
library(rgdal)
library(RODBC)
library(dplyr)
# devtools::install_github('https://github.com/donco/odeqstatusandtrends')
library(odeqstatusandtrends)
# devtools::install_github('https://github.com/donco/odeqassessment')
library(odeqassessment)
# devtools::install_github('https://github.com/TravisPritchardODEQ/IR2018/tree/master/IRlibrary')
library(AWQMSdata)
# library(IRlibrary)
library(dataRetrieval)
library(ggplot2)
library(lubridate)
library(pbapply)
library(parallel)
start.date = "2000-01-01"
end.date = "2019-01-01"
Name <- "Clackamas"
# support_files_dir <- "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb/WBD_OR"
basin_shp <- readOGR(dsn = "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb",
layer = 'WBD_HU8', integer64="warn.loss", verbose = FALSE)
basin_shp <- basin_shp[basin_shp$HU_8_NAME %in% c("Clackamas", "South Santiam", "Wilson-Trask-Nestucca", "Coast Fork Willamette"), ]
clack_stations_AWQMS <- get_stations_AWQMS(basin_shp)
# ss_stations_NWIS <- get_stations_NWIS(agwqma_shp)
clack_data_raw <- GetData(parameters = c("Temperature", "Bacteria", "TSS", "DO", "TP", "pH"),
stations_AWQMS = clack_stations_AWQMS,
# stations_NWIS = ss_stations_NWIS,
start.date = start.date,
end.date = end.date)
ent_data <- AWQMSdata::AWQMS_Data(startdate = start.date, enddate = end.date, char = "Enterococcus")
clack_data_raw <- bind_rows(clack_data_raw, ent_data)
clack_data <- CleanData(clack_data_raw)
clack_data <- add_criteria(clack_data)
clack_data_pH <- clack_data %>% filter(Char_Name == "pH")
clack_data_pH <- Censored_data(clack_data_pH, criteria = 'pH_Min')
clack_data_pH <- pH_assessment(clack_data_pH)
# clack_data_ph$exceed <- ifelse(clack_data_ph$Result_Numeric >= clack_data_ph$pH_crit_min & clack_data_ph$Result_Numeric <= clack_data_ph$pH_crit_max, FALSE, TRUE)
# clack_data_ph <- clack_data_ph %>% filter(!is.na(exceed))
clack_data_temp <- clack_data %>% filter(Char_Name == "Temperature, water")
clack_data_temp <- Censored_data(clack_data_temp, criteria = "temp_crit")
clack_data_temp <- temp_assessment(clack_data_temp)
# clack_data_temp$exceed <- ifelse(clack_data_temp$Result_Numeric >= clack_data_temp$temp_crit, TRUE, FALSE)
# clack_data_temp <- clack_data_temp %>% filter(!is.na(exceed))
clack_data_TP <- clack_data %>% filter(Char_Name == "Phosphate-phosphorus")
clack_data_TP$TP_crit <- NA
clack_data_TP <- Censored_data(clack_data_TP, criteria = "TP_crit")
clack_data_TP <- TP_assessment(clack_data_TP)
clack_data_TSS <- clack_data %>% filter(Char_Name == "Total suspended solids")
clack_data_TSS$TSS_crit <- NA
clack_data_TSS <- Censored_data(clack_data_TSS, criteria = "TSS_crit")
clack_data_TSS <- TSS_assessment(clack_data_TSS)
clack_data_bact <- clack_data %>% filter(Char_Name %in% AWQMS_Char_Names('bacteria'))
clack_data_bact <- clack_data_bact %>% mutate(bact_crit_min = pmin(bact_crit_ss, bact_crit_geomean, bact_crit_percent, na.rm = TRUE))
clack_data_bact <- Censored_data(clack_data_bact, criteria = "bact_crit_min")
clack_data_ent <- Coastal_Contact_rec(clack_data_bact)
clack_data_eco <- Fresh_Contact_rec(clack_data_bact)
clack_data_shell <- Shell_Harvest(clack_data_bact)
setwd("//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/odeq_assessment package/odeqassessment")
getwd()
devtools::document()
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/odeq_assessment package/odeqassessment/R/bact_coastal_contact_rec.R', echo=TRUE)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/odeq_assessment package/odeqassessment/R/bact_fresh_contact_rec.R', echo=TRUE)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/odeq_assessment package/odeqassessment/R/bact_shell_harvest.R', echo=TRUE)
clack_data_ent <- Coastal_Contact_rec(clack_data_bact)
clack_data_eco <- Fresh_Contact_rec(clack_data_bact)
clack_data_shell <- Shell_Harvest(clack_data_bact)
clack_data_bact <- bind_rows(clack_data_ent, clack_data_eco, clack_data_shell)
bact_status <- status_stns(clack_data_eco)
pH_status <- status_stns(clack_data_pH)
temp_status <- status_stns(clack_data_temp)
TP_status <- status_stns(clack_data_TP)
TSS_status <- status_stns(clack_data_TSS)
bact_status <- status_stns(clack_data_eco)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status)
status_stns <- function(data, status_years = c((as.numeric(format(Sys.Date(), "%Y"))-2):format(Sys.Date(), "%Y"))) {
data$year <- lubridate::year(data$sample_datetime)
if(any(unique(data$year) %in% status_years)){
status_check <- data %>%
filter(year %in% status_years) %>%
dplyr::group_by(MLocID, Char_Name) %>%
dplyr::summarise(n_years = length(unique(year)),
excursions = sum(excursion_cen),
status = if_else(any(excursion_cen == 1), "Not Attaining", "Attaining")) %>%
filter(n_years>=2)
print(paste("Data should be sufficient for", NROW(status_check), "different statuses to be determined."))
} else {
status_check <- "No stations meet Status criteria"
print(status_check)
}
return(status_check)
}
pH_status <- status_stns(clack_data_pH)
temp_status <- status_stns(clack_data_temp)
TP_status <- status_stns(clack_data_TP)
TSS_status <- status_stns(clack_data_TSS)
bact_status <- status_stns(clack_data_eco)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status)
View(status)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status, bact_status)
View(status)
View(clack_data_eco)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/odeq_assessment package/odeqassessment/R/bact_fresh_contact_rec.R', echo=TRUE)
clack_data_eco <- Fresh_Contact_rec(clack_data_bact)
bact_status <- status_stns(clack_data_eco)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status, bact_status)
pH_status <- status_stns(clack_data_pH)
temp_status <- status_stns(clack_data_temp)
TP_status <- status_stns(clack_data_TP)
TSS_status <- status_stns(clack_data_TSS)
bact_status <- status_stns(clack_data_eco)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status, bact_status)
pH_trend <- trend_stns(clack_data_pH)
temp_trend <- trend_stns(clack_data_temp)
TP_trend <- trend_stns(clack_data_TP)
TSS_trend <- trend_stns(clack_data_TSS)
bact_trend <- trend_stns(clack_data_eco)
trend <- bind_rows(pH_trend, temp_trend, TP_trend, TSS_trend, bact_trend)
View(trend)
View(status)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/status_stns.R', echo=TRUE)
bact_status <- status_stns(clack_data_eco)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status, bact_status)
View(status)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/status_stns.R', echo=TRUE)
bact_trend <- trend_stns(clack_data_eco)
trend <- bind_rows(pH_trend, temp_trend, TP_trend, TSS_trend, bact_trend)
bact_status <- status_stns(clack_data_eco)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status, bact_status)
View(status)
View(trend)
seaKen <- sea_ken(filter(clack_data, MLocID %in% unique(trend$MLocID)))
seaKen_sample_size <- attributes(seaKen)$sample_size
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/sea_ken.R', echo=TRUE)
seaKen <- sea_ken(filter(clack_data, MLocID %in% unique(trend$MLocID)))
View(seaKen)
seaKen_sample_size <- attributes(seaKen)$sample_size
bact_stations <- unique(c(status[status$Char_Name %in% AWQMS_Char_Names("bacteria"),]$MLocID,
seaKen[seaKen$Char_Name %in% AWQMS_Char_Names("bacteria"),]$MLocID))
bact_plots <- list()
plot_data <- clack_data_bact %>% filter(Char_Name %in% AWQMS_Char_Names("bacteria"), MLocID == i)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/plot_bacteria.R', echo=TRUE)
bact_stations <- unique(c(status[status$Char_Name %in% AWQMS_Char_Names("bacteria"),]$MLocID,
seaKen[seaKen$Char_Name %in% AWQMS_Char_Names("bacteria"),]$MLocID))
bact_plots <- list()
for(i in bact_stations){
plot_data <- clack_data_bact %>% filter(Char_Name %in% AWQMS_Char_Names("bacteria"), MLocID == i)
p <- plot_bacteria(plot_data, seaKen, i)
bact_plots[[i]] <- p
}
clack_data_eco <- Fresh_Contact_rec(clack_data_bact)
View(clack_data_eco)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/odeq_assessment package/odeqassessment/R/bact_fresh_contact_rec.R', echo=TRUE)
clack_data_eco <- Fresh_Contact_rec(clack_data_bact)
pH_status <- status_stns(clack_data_pH)
temp_status <- status_stns(clack_data_temp)
TP_status <- status_stns(clack_data_TP)
TSS_status <- status_stns(clack_data_TSS)
bact_status <- status_stns(clack_data_eco)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status, bact_status)
pH_trend <- trend_stns(clack_data_pH)
temp_trend <- trend_stns(clack_data_temp)
TP_trend <- trend_stns(clack_data_TP)
TSS_trend <- trend_stns(clack_data_TSS)
bact_trend <- trend_stns(clack_data_eco)
trend <- bind_rows(pH_trend, temp_trend, TP_trend, TSS_trend, bact_trend)
bact_stations <- unique(c(status[status$Char_Name %in% AWQMS_Char_Names("bacteria"),]$MLocID,
seaKen[seaKen$Char_Name %in% AWQMS_Char_Names("bacteria"),]$MLocID))
bact_plots <- list()
for(i in bact_stations){
plot_data <- clack_data_bact %>% filter(Char_Name %in% AWQMS_Char_Names("bacteria"), MLocID == i)
p <- plot_bacteria(plot_data, seaKen, i)
bact_plots[[i]] <- p
}
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/plot_bacteria.R', echo=TRUE)
for(i in bact_stations){
plot_data <- clack_data_bact %>% filter(Char_Name %in% AWQMS_Char_Names("bacteria"), MLocID == i)
p <- plot_bacteria(plot_data, seaKen, i)
bact_plots[[i]] <- p
}
data <- plot_data
station <- i
# subset seaken table to parameter and significant trends
seaken_bact <- seaKen %>% filter(Char_Name %in% AWQMS_Char_Names("bacteria"),
significance != "No Significant Trend",
MLocID == station)
# obtain data range limits for plotting
xmin <- min(data$sample_datetime, na.rm = TRUE)
xmax <- max(data$sample_datetime, na.rm = TRUE)
ymin <- min(c(data$Result_Numeric, data$bact_crit_ss, data$bact_crit_geomean), na.rm = TRUE)
ymax <- max(c(data$Result_Numeric, data$bact_crit_ss, data$bact_crit_geomean), na.rm = TRUE)
data$excursion <- if_else(data$excursion_cen == 1, "Excursion", "Result") # change numeric value to descriptor
View(data)
bact_stations <- unique(c(status[status$Char_Name %in% AWQMS_Char_Names("bacteria"),]$MLocID,
seaKen[seaKen$Char_Name %in% AWQMS_Char_Names("bacteria"),]$MLocID))
bact_plots <- list()
for(i in bact_stations){
plot_data <- clack_data_eco %>% filter(Char_Name %in% AWQMS_Char_Names("bacteria"), MLocID == i)
p <- plot_bacteria(plot_data, seaKen, i)
bact_plots[[i]] <- p
}
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/plot_bacteria.R', echo=TRUE)
bact_stations <- unique(c(status[status$Char_Name %in% AWQMS_Char_Names("bacteria"),]$MLocID,
seaKen[seaKen$Char_Name %in% AWQMS_Char_Names("bacteria"),]$MLocID))
bact_plots <- list()
for(i in bact_stations){
plot_data <- clack_data_eco %>% filter(Char_Name %in% AWQMS_Char_Names("bacteria"), MLocID == i)
p <- plot_bacteria(plot_data, seaKen, i)
bact_plots[[i]] <- p
}
bact_plots[2]
temp_stations <- unique(c(status[status$Char_Name == "Temperature, water",]$MLocID, seaKen[seaKen$Char_Name == "Temperature, water",]$MLocID))
temp_plots <- list()
for(i in temp_stations){
plot_data <- clack_data_temp %>% filter(Char_Name == "Temperature, water", MLocID == i)
p <- plot_temperature(plot_data, seaKen, i)
temp_plots[[i]] <- p
}
temp_plots[2]
temp_plots[2]
TP_stations <- unique(c(status[status$Char_Name == "Phosphate-phosphorus",]$MLocID, seaKen[seaKen$Char_Name == "Phosphate-phosphorus",]$MLocID))
TP_plots <- list()
for(i in TP_stations){
plot_data <- clack_data_TP %>% filter(Char_Name == "Phosphate-phosphorus", MLocID == i)
p <- plot_TP(plot_data, seaKen, i)
TP_plots[[i]] <- p
}
TP_plots[2]
View(seaKen)
View(trend)
status <- status
View(clack_stations_AWQMS)
sea_ken <- seaKen
st_stations <- unique(c(status$MLocID, sea_ken$MLocID))
st_stations_info <- stations %>% dplyr::filter(MLocID %in% st_stations)
st_stations_info <- st_stations %>% dplyr::filter(MLocID %in% st_stations)
stations <- clack_stations_AWQMS
st_stations <- unique(c(status$MLocID, sea_ken$MLocID))
st_stations_info <- st_stations %>% dplyr::filter(MLocID %in% st_stations)
st_stations_info <- stations %>% dplyr::filter(MLocID %in% st_stations)
View(st_stations_info)
colnames(clack_stations_AWQMS)
st_stations_info <- stations %>% dplyr::filter(MLocID %in% st_stations) %>%
dplyr::select(AU_ID, MLocID, StationDes)
View(st_stations_info)
View(status)
View(seaKen)
param_sum <- merge(st_stations, status, by = "MLocID")
param_sum <- merge(st_stations_info, status, by = "MLocID")
View(param_sum)
param_sum <- merge(param_sum, sea_ken, by = c("MLocID","Char_Name"))
View(param_sum)
param_sum <- dplyr::select(param_sum, -p_value, -confidence, -intercept)
param_sum <- dplyr::select(param_sum, AU_ID, Char_Name, MLocID, StationDes, status, trend)
param_sum <- apply(param_sum, 2, sort)
param_sum <- merge(st_stations_info, status, by = "MLocID")
param_sum <- merge(param_sum, sea_ken, by = c("MLocID","Char_Name"))
param_sum <- dplyr::select(param_sum, AU_ID, Char_Name, MLocID, StationDes, status, trend)
param_sum <- param_sum[order(dd[,1], dd[,2], dd[,3])]
param_sum <- param_sum[order(param_sum[,1], param_sum[,2], param_sum[,3])]
param_sum <- param_sum[order(param_sum[,1], param_sum[,2], param_sum[,3]),]
View(param_sum)
